@use "./base.scss";
@use "./variables.scss" as *;
@use "./syntax.scss";
@use "./callouts.scss";
// put your custom CSS here!

 // remove other tags on the tag listing
.page-listing .tag-link {
  display: none;
}

a.light-a {
  color: var(--gray)
}

.forced-row {
  // flex: 1;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  // gap: 2rem;
  top: 0;
  // width: initial;
  // margin-top: 2rem;
  box-sizing: border-box;
  padding: 0;
  // padding-top: 50%;     /* Set padding-top to same percentage as width */
  position: relative;
  // position: initial;
  & .map, .darkmode, .minibutton {
      margin: 0.4rem;
  }
  // @media all and (min-width: $tablet) {
  @media all and ($mobile) {
      justify-content: flex-end;
  }
}

.forced-column{
  // flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  top: 0;
  box-sizing: border-box;
  padding: 0;
  position: initial;
  & .map, .darkmode {
      margin: 0.4rem;
  }
  @media all and ($mobile) {
  // @media all{
      justify-content: flex-end;
  }
}


////////////////////////////////////////////////////////////////////////////
// https://github.com/Naraenda/quartz-ascone/commit/6c094df3ac0863d0f13690ca2136ad894943e76e#diff-c68e4a912f86f4c86fff1eda2b1c8c4395023a4f543e4183ab454afe6d3955e9
// CSS Houdini
// Using properties we can stack multiple types of transforms!
// But this is not in mainline firefox yet :(
// @property --mov-y {
//   syntax: '<length>';
//   initial-value: 0px;
//   inherits: false;
// }
// @property --rot-y {
//   syntax: '<angle>';
//   initial-value: 0deg;
//   inherits: false;
// }

:root {
    --mov-y: 0px;
    --rot-y: 0deg;
  }
  
  .ft- {
  
    @keyframes rainbow-animate {
        0% {
          background-position: 0px 0;
        }
        50% {
          background-position: 100px 0;
        }
        100% {
          background-position: 200px 0;
        }
      };
  
    @keyframes shake-animate {
      // CSS Houdini
      // 0% { --mov-y: 1px }
      // 100% { --mov-y: -1px }
      0% { transform: translateY(1px) }
      100% { transform: translateY(-1px) }
    };
  
    @keyframes spin-animate {
      // CSS Houdini
      // 0% { --rot-y: 0deg }
      // 100% { --rot-y: 360deg }
      0% { transform: rotateY(0deg) }
      100% { transform: rotateY(-360deg) }
    };

    @keyframes bounce-animate {
        0%, 20%, 50%, 80%, 100% {
          transform: translateY(0);
        }
        40% {
          transform: translateY(-30px);
        }
        60% {
          transform: translateY(-15px);
        }
      }
      
      @keyframes pulse-animate {
        0%, 100% {
          transform: scale(1);
          opacity: 1;
        }
        50% {
          transform: scale(1.1);
          opacity: 0.7;
        }
      }

      @keyframes fade-animate {
        0% {
          opacity: 0;
        }
        100% {
          opacity: 1;
        }
      }

      @keyframes rotate-animate {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      
      @keyframes flip-animate {
        0% {
          transform: rotateY(0deg);
        }
        100% {
          transform: rotateY(180deg);
        }
      }

      @keyframes zoom-animate {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.5);
        }
        100% {
          transform: scale(1);
        }
      }

      @keyframes swing-animate {
        0% {
          transform: rotate(-15deg);
        }
        50% {
          transform: rotate(15deg);
        }
        100% {
          transform: rotate(-15deg);
        }
      }

      @keyframes flash-animate {
        0%, 100% {
          opacity: 1;
        }
        50% {
          opacity: 0;
        }
      }
      
      @keyframes wobble-animate {
        0% {
          transform: translateX(0);
        }
        15% {
          transform: translateX(-25px) rotate(-10deg);
        }
        30% {
          transform: translateX(20px) rotate(10deg);
        }
        45% {
          transform: translateX(-15px) rotate(-5deg);
        }
        60% {
          transform: translateX(10px) rotate(3deg);
        }
        75% {
          transform: translateX(-5px) rotate(-2deg);
        }
        100% {
          transform: translateX(0);
        }
      }
      
      
    @for $i from 0 through 10 {
      &char {
        animation-delay: 10ms;
      }
    }
    &letters {
      white-space: nowrap;
    }
  
    &letters span {
      white-space: pre;
    }
  
    &rainbow {
      background: repeating-linear-gradient(to right,#cb94ff 0px, #028ba1 20px, #4dc725 40px, #ff941a 60px, #d21b1b 80px, #cb94ff 100px);
      background-size: 100px;
      background-clip: text;
      color: transparent !important;
      & span, p {
        color: transparent;
      }
      animation: rainbow-animate 2s linear infinite;
    }
  
    &shake .char {
      animation: shake-animate 0.05s linear infinite alternate;
      display: inline-block;
      @for $i from 0 through 10 {
        &:nth-child(10n + #{$i}) {
          animation-delay: #{$i * -20ms};
        }
      }
    }
  
    &wave .char {
      animation: shake-animate 0.20s ease-in-out infinite alternate;
      display: inline-block;
      @for $i from 0 through 10 {
        &:nth-child(10n + #{$i}) {
          animation-delay: #{$i * -40ms};
        }
      }
    }
  
    &spin .char {
      animation: spin-animate 1.00s ease-in-out infinite;
      display: inline-block;
      @for $i from 0 through 10 {
        &:nth-child(10n + #{$i}) {
          animation-delay: #{$i * 40ms - 400ms};
        }
      }
    }
  
    // CSS Houdini
    // &letters .char {
    //   transform: translateY(var(--mov-y)) rotateY(var(--rot-y));
    // }
  }
  ////////////////////////////////////////////////////////////////////////////
  .sticky-note-wrapper {
    margin: 0 auto;
    left: calc(50% - 90px - 1em);
    position: absolute;
    padding: 0;
    width: 0;
  }
  
  .sticky-note {
    position: absolute;
    background-color: powderblue;
    width: 180px;
    min-height: 100px;
    padding: 0 1em;
    // box-shadow: 1em 1em rgba(0, 0, 0, 0.5), inset 0px 1em rgba(255, 255, 255, 0.5) !important;
    box-shadow: inset 0px 1em rgba(255, 255, 255, 0.5) !important;
    z-index: 1;
    cursor: grab;

    &:active {
        cursor: grabbing;
    }
  
    &.red {
      background-color: salmon;
    }
  
    &.green {
      background-color: lightgreen;
    }
  
    &.blue {
      background-color: powderblue;
    }
  
    &.purple {
      background-color: goldenrod;
    }
  }